#!/bin/bash
set -e
set -u
set -o pipefail

################################################################################
# Check files in a git repo.
#
# Binaries are allowed in an "assets" directory and nowhere else.
# Shell scripts must conform to shellcheck.
# Trailing whitespace is not allowed.
################################################################################

usage() {
  cat <<EOF
  Usage: "$0" [-dh] [-v VERBOSITY]
    -d            debug, shorthand for -v2
    -h            help (this screen)
    -v VERBOSITY, where VERBOSITY is 0, 1, or 2
EOF
}

main() {
  declare -i RC=0

  # https://github.com/koalaman/shellcheck/wiki/SC2044
  while IFS=$'' read -r -d '' file; do
    debug checking "${file}"
    if is_directory "${file}"; then
      continue # A git submodule appears as a directory in "git ls-files".
    fi
    check_binary     "${file}" || RC=1
    check_shell      "${file}" || RC=1
  done < <(git ls-files -z)

  check_whitespace || RC=1

  return ${RC}
}

is_binary() {
  declare -r file="$1"
  declare -i RC=1
  declare output

  output="$(file --mime --dereference "${file}")"
  readonly output

  if [[ ${output} =~ inode/x-empty ]]; then
    : # Don't consider zero-sized file to be binary.
  elif [[ "$(stat -c %s "${file}")" =~ "^0$" ]]; then
    : # Don't consider zero-sized file to be binary.
  elif [[ ${output} =~ binary$ ]]; then
    RC=0
  fi

  return ${RC}
}

is_directory() {
  declare -r file="$1"
  file --mime --dereference "${file}" | grep 'directory' &> /dev/null
}

is_shell_script() {
  declare -r file="$1"
  declare -i RC=1

  if file --mime --dereference "${file}" | grep 'shellscript' &> /dev/null; then
    RC=0
  elif [[ "${file}" =~ \.sh$ ]]; then
    RC=0
  fi

  return ${RC}
}

check_binary() {
  declare -r file="$1"
  declare -i RC=0

  if [[ "${file}" =~ assets/ ]]; then
    RC=0 # Binaries are allowed in the assets directory.
  elif is_binary "${file}"; then
    err \""${file}"\" is a binary file
    RC=1
  fi

  return ${RC}
}

check_shell() {
  declare -r file="$1"
  declare -i RC=0

  if ! is_shell_script "${file}"; then
    return 0
  fi

  bash -n "${file}" || RC=1

  if command -v shellcheck &> /dev/null; then
    # https://github.com/koalaman/shellcheck
    shellcheck "${file}" || RC=1
  else
    warn unable to find \"shellcheck\" in \$PATH ... skipping shellcheck checks
  fi

  return ${RC}
}

check_whitespace() {
  local -i RC=1
  local output
  # This command identifies whitespace errors and leftover conflict markers.
  # It works only on committed files, so we have to warn on dirty git tree.
  output="$(git diff-tree --check "$(git hash-object -t tree /dev/null)" HEAD)"
  readonly output

  if [[ -z "${output}" ]]; then
    RC=0
    info whitespace OK
  else
    err Found whitespace errors. See below.
    echo "${output}" >&2
  fi

  if is_git_dirty; then
    warn 'Git repo has uncommitted changes; recommend to commit and re-run tests.'
  fi

  return ${RC}
}

################################################################################
# Program execution starts here.
################################################################################

# Default values.
readonly LOCAL_SHELLCHECK_EXCLUDES="-e SC1091"
declare -rx SHELLCHECK_OPTS="${SHELLCHECK_OPTS:-"${LOCAL_SHELLCHECK_EXCLUDES=}"}"

. ci/helpers.sh

# http://wiki.bash-hackers.org/howto/getopts_tutorial
while getopts ":dhv:" opt; do
  case ${opt} in
    d)
      VERBOSITY=2
      ;;
    h)
      usage
      exit 0
      ;;
    v)
      VERBOSITY=${OPTARG}
      ;;
    :)
      usage
      err option -"${OPTARG}" requires an argument
      exit 1
      ;;
    \?|*)
      usage
      err invalid option -"${OPTARG}"
      exit 1
      ;;
  esac
done
readonly VERBOSITY

# After the shift, $* contains non-option arguments.
shift $((OPTIND-1))

main
